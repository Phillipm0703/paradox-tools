#!/usr/bin/env ruby
# this is for EU4 1.25+

require_relative "./eu4_analysis"

class AnalyzeMissionsCountries < EU4Analysis
  def each_mission_file(&block)
    glob("missions/*").each do |path|
      yield parse(path)
    end
  end

  def parse_potential(potential)
    # Let's just assume all DLCs are on

    # Just those affecting missions
    dlcs = [
      "Purple Phoenix",
      "Third Rome",
      "Rule Britannia",
      "Rights of Man",
      "Dharma",
      "Golden Century",
      "Emperor",
    ]
    return if dlcs.any?{|dlc| potential.to_a.include? Property::NOT["has_dlc", dlc] }
    potential.delete!("has_dlc")

    potential.delete!(Property["is_random_new_world", false])
    potential.delete!(Property::NOT["map_setup", "map_setup_random"])
    if potential.keys == ["tag"]
      return localization(potential["tag"])
    end

    if potential.keys == ["OR"] and potential["OR"].to_a.all?{|p| p.key == "tag"}
      return potential["OR"].to_a.map{|p| localization(p.val) }.join("/")
    end

    if potential.keys == ["primary_culture"]
      return localization(potential["primary_culture"]) + " culture"
    end

    case potential
    when PropertyList["always", true]
      "generic"
    when PropertyList["capital_scope", PropertyList["continent", "europe"]]
      "european"
    when PropertyList["capital_scope", PropertyList["continent", "asia"]]
      "asian"
    when PropertyList[
        "capital_scope", PropertyList["continent", "europe"],
        "is_part_of_hre", true,
        "NOT", PropertyList["is_emperor", true],
      ]
      "hre minor"
    when PropertyList[
        "capital_scope", PropertyList["continent", "europe"],
        "is_part_of_hre", true,
        "NOT", PropertyList["is_emperor", true],
        "government", "theocracy",
      ]
      "hre theocracy"
    when PropertyList[
        "capital_scope", PropertyList["continent", "europe"],
        "is_part_of_hre", true,
        "NOT", PropertyList["is_emperor", true],
        "NOT", PropertyList["government", "theocracy"],
        "NOT", PropertyList["government", "republic"],
      ]
      "hre monarchy"
    when PropertyList[
        "capital_scope", PropertyList["continent", "europe"],
        "is_part_of_hre", true,
        "NOT", PropertyList["is_emperor", true],
        "government", "republic",
      ]
      "hre republic"
    when PropertyList["capital_scope", PropertyList["OR", PropertyList[
        "region", "sahel_region",
        "region", "niger_region",
        "region", "guinea_region",
        "region", "horn_of_africa_region",
        "region", "east_africa_region",
        "region", "central_africa_region",
        "region", "kongo_region",
        "region", "south_africa_region",
      ]]]
      "african"
    when PropertyList[
        "culture_group", "turko_semitic",
        "religion_group", "muslim",
        "NOT", PropertyList["OR", PropertyList[
          "primary_culture", "turkish",
          "tag", "RAS",
          "tag", "ADE",
        ]],
      ]
      "arabic (except Turkish, Rassids, Aden)"
    when PropertyList["religion", "coptic"]
      "coptic"
    when PropertyList["OR", PropertyList["has_reform", "daimyo", "has_reform", "shogunate"]]
      "daimyo/shogunate"
    when PropertyList[
        "technology_group", "high_american",
        "capital_scope", PropertyList["OR", PropertyList[
          "continent", "north_america",
          "continent", "south_america",
          "continent", "new_world",
        ]],
      ]
      "High American" # (not in Europe, but whatevs)
    when PropertyList[
      "capital_scope", PropertyList["OR", PropertyList[
          "continent", "north_america",
          "continent", "south_america",
          "continent", "new_world",
        ]],
        "OR", PropertyList[
          "technology_group", "north_american",
          "technology_group", "south_american",
          "technology_group", "mesoamerican",
        ],
      ]
      "American native"
    when PropertyList["technology_group", "high_american"]
      "High American" # (could be in Europe)
    when PropertyList["has_reform", "pirate_republic_reform"]
      "Pirate"
    when PropertyList[
        "has_reform", "pirate_republic_reform",
        "capital_scope", PropertyList["colonial_region", "colonial_the_carribean"],
      ]
      "Carribean Pirate"
    when PropertyList["OR", PropertyList[
        "has_reform", "daimyo",
        "has_reform", "shogunate",
        "tag", "JAP",
      ]]
      "Japanese"
    when PropertyList["OR", PropertyList[
        "has_reform", "indep_daimyo",
        "has_reform", "daimyo",
        "has_reform", "shogunate",
        "tag", "JAP",
      ]]
      "Japanese"
    when PropertyList["OR", PropertyList[
        "primary_culture", "mongol",
        "primary_culture", "chahar",
        "primary_culture", "khalkha",
        "primary_culture", "oirats",
      ]]
      "Mongol"
    when PropertyList["OR", PropertyList[
        "tag", "CAS",
        "AND", PropertyList[
          "tag", "SPA",
          "NOT", PropertyList["primary_culture", "aragonese"],
          "NOT", PropertyList["primary_culture", "catalan"],
        ],
      ]]
      "Castille (or formed Spain)"
    when PropertyList["OR", PropertyList[
        "tag", "ARA",
        "tag", "CAT",
        "tag", "VAL",
        "AND", PropertyList[
          "tag", "SPA",
          "OR", PropertyList[
            "primary_culture", "aragonese",
            "primary_culture", "catalan",
          ],
        ],
      ]]
      "Aragon (of formed Spain)"
    when PropertyList["OR", PropertyList[
        "technology_group", "aboriginal_tech",
        "technology_group", "polynesian_tech",
      ]]
      "Aborigine/Polynesian"
    when PropertyList[
        "capital_scope", PropertyList["OR", PropertyList[
          "continent", "north_america",
          "continent", "south_america",
          "continent", "new_world",
        ]],
        "OR", PropertyList[
          "technology_group", "andean",
          "technology_group", "north_american",
          "technology_group", "south_american",
          "technology_group", "mesoamerican",
        ],
      ]
      "American Native"
    when PropertyList[
      "technology_group", "chinese",
      "culture_group", "malay",
      "NOT", PropertyList["tag", "MAJ"],
    ]
      "Malay minor"
    else
      # "Unknown #{potential.inspect}"
      "Unknown"
    end
  end

  def call
    totals = Hash.new(0)
    each_mission_file do |node|
      node.each do |group_name, group|
        potential = parse_potential(group["potential"]) or next
        missions = group.keys - %W[potential_on_load generic has_country_shield ai potential slot]
        totals[potential] += missions.size
      end
    end
    totals.sort_by(&:last).reverse.each do |potential, count|
      puts "#{potential} - #{count}"
    end
  end
end

AnalyzeMissionsCountries.new_from_argv.call
