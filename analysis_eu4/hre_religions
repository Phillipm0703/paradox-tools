#!/usr/bin/env ruby

require_relative "../lib/paradox"

class HREReligions < ParadoxGame
  def initialize(save_game, *paths)
    super(*paths)
    @path = save_game
    @data = ParadoxModFile.new(path: @path).parse!
  end

  def country_religion(tag)
    @data["countries"][tag]["religion"]
  end

  def capital_in_hre?(tag)
    capital = @data["countries"][tag]["capital"]
    return false if capital == nil or capital == 0
    !!@data["provinces"][-capital]["hre"]
  end

  def country_on_map?(tag)
    !!@data["countries"][tag]["num_of_cities"]
  end

  def call
    hre_members_religions = {}
    @data["countries"].keys.each do |tag|
      next unless capital_in_hre?(tag)
      next unless country_on_map?(tag)
      hre_members_religions[tag] = country_religion(tag)
    end
    hre_members_religions.map{|tag, religion|
      [religion, localization(tag)]
    }.sort.each do |religion, country_name|
      puts "#{religion}: #{country_name}"
    end
  end
end

unless ARGV.size >= 2
  STDERR.puts "Usage: #{$0} <save.eu4> <root> [<mod1> <mod2> ... ] # non-compressed save only"
  exit 1
end

HREReligions.new(*ARGV).call
