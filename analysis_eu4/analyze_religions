#!/usr/bin/env ruby

require_relative "./eu4_analysis"
require_relative "bonus_scoring"

class AnalyzeIdeaGroups < EU4Analysis
  def initialize(*)
    super
    @religions = Set[]
    @religion_node = {}
    @country = {}
    @country_secondary = {}
    @religious_schools = nil
    @has_deity = {}
    @deity = {}
  end

  def parse_static_bonuses
    known_keys = %W[
      allowed_center_conversion
      allowed_conversion
      can_have_secondary_religion
      color
      country
      country_as_secondary
      date
      flag_emblem_index_range
      flags_with_emblem_percentage
      heretic
      hre_heretic_religion
      hre_religion
      icon
      misguided_heretic
      on_convert
      personal_deity
      province
      will_get_center
    ]

    parse("common/religions/00_religion.txt").each do |group_name, group|
      group.each do |religion_name, religion|
        next unless religion.is_a?(PropertyList)
        if religion_name == "religious_schools"
          raise "Multiple religions with schools" if @religious_schools
          @religious_schools = religion
          next
        end

        @religions << religion_name
        @country[religion_name] = religion["country"]
        @country_secondary[religion_name] = religion["country_as_secondary"]
        @religion_node[religion_name] = religion
        @has_deity[religion_name] = religion["personal_deity"] # we actually check if deities exist
        unknown_keys = religion.keys - known_keys

        unless unknown_keys.empty?
          p unknown_keys
        end
      end
    end
  end

  def parse_deity
    glob("common/personal_deities/*.txt").each do |path|
      parse(path).each do |deity_name, deity|
        bonuses = {}
        deity.each do |k, v|
          next if %W[ai_will_do sprite allow].include?(k)
          bonuses[k] = v
        end
        deity["allow"].each do |k,v|
          raise unless k == "religion"
          @deity[v] ||= {}
          @deity[v][deity_name] = bonuses
        end
      end
    end
  end

  def bonus_score(bonuses)
    score = BonusScoring.new
    bonuses.each do |k,v|
      score.send(k,v)
    end
    score
  end

  def has_secondary?(religion_name)
    @religion_node[religion_name]["can_have_secondary_religion"]
  end

  def primary_bonus_score(religion_name)
    bonus_score(@country[religion_name]).score
  end

  def secondary_bonus_score(religion_name)
    bonus_score(@country_secondary[religion_name]).score
  end

  def deity_bonus_score(religion_name, deity_name)
    bonus_score(@deity[religion_name][deity_name]).score
  end

  def each_religion
    @religions.each do |religion_name|
      # Tengri
      if has_secondary?(religion_name)
        @religions.each do |secondary_name|
          next if secondary_name == religion_name
          yield(
            "#{localization(religion_name)} + #{localization(secondary_name)}",
            secondary_bonus_score(secondary_name)
          )
        end
        next
      end

      # Hindu, Norse
      if @deity[religion_name]
        @deity[religion_name].each do |deity_name, deity|
          yield(
            "#{localization(religion_name)} + #{localization(deity_name)}",
            primary_bonus_score(religion_name) + deity_bonus_score(religion_name, deity_name)
          )
        end
        next
      end

      # Default - Jewish, Zoroastrian, Animist, Totemism
      yield(localization(religion_name), primary_bonus_score(religion_name))
    end
  end

  def call
    parse_static_bonuses
    parse_deity

    each_religion do |name, score|
      puts "#{score.round(6)} - #{name}"
    end
  end
end

AnalyzeIdeaGroups.new_from_argv.call

__END__

TODO:

anglican
buddhism
catholic
confucianism
coptic
hussite
ibadi
inti
mahayana
mesoamerican_religion
nahuatl
orthodox
protestant
reformed
religious_schools
shamanism
shiite
shinto
sikhism
sunni
vajrayana

DONE:

animism
hinduism
jewish
norse_pagan_reformed
tengri_pagan_reformed
totemism
zoroastrian
