#!/usr/bin/env ruby

require_relative "./eu4_analysis"
require_relative "bonus_scoring"

def bonus_score(bonuses)
  score = BonusScoring.new
  bonuses.each do |k,v|
    score.send(k,v)
  end
  score.score
end

class ReligionGroup
  attr_reader :name, :node
  attr_accessor :religions, :religious_schools

  def initialize(name, node)
    @name = name
    @node = node
    @religions = []
    @religious_schools = nil
  end
end

class Religion
  attr_reader :group, :name, :node
  attr_accessor :deities

  def initialize(group, name, node)
    @group = group
    @name = name
    @node = node
    @deities = {}
    unknown_keys_warning!
  end

  def has_secondary?
    @node["can_have_secondary_religion"]
  end

  def uses_isolationism?
    !!@node["uses_isolationism"]
  end

  def has_deities?
    !@deities.empty?
  end

  def blessings
    @node["blessings"]
  end

  def deity_score(deity_name)
    bonus_score @deities[deity_name]
  end

  def primary_score
    bonus_score @node["country"]
  end

  def secondary_score
    bonus_score @node["country_as_secondary"]
  end

  def unknown_keys_warning!
    known_keys = %W[
      allowed_center_conversion
      allowed_conversion
      can_have_secondary_religion
      color
      country
      country_as_secondary
      date
      flag_emblem_index_range
      flags_with_emblem_percentage
      harmonized_modifier
      heretic
      hre_heretic_religion
      hre_religion
      icon
      misguided_heretic
      on_convert
      personal_deity
      province
      uses_isolationism
      will_get_center
      holy_sites
    ]
    unknown_keys = @node.keys - known_keys

    unless unknown_keys.empty?
      p unknown_keys
    end
  end
end

class AnalyzeIdeaGroups < EU4Analysis
  def initialize(*)
    super
    @groups = {}
    @religions = {}
    @isolationism = []
  end

  def parse_static_bonuses
    parse("common/religions/00_religion.txt").each do |group_name, group_node|
      group = @groups[group_name] = ReligionGroup.new(group_name, group)

      group_node.each do |religion_name, religion|
        next unless religion.is_a?(PropertyList)
        if religion_name == "religious_schools"
          group.religious_schools = religion
          next
        end

        @religions[religion_name] = Religion.new(group, religion_name, religion)
      end
    end
  end

  def parse_deity
    glob("common/personal_deities/*.txt").each do |path|
      parse(path).each do |deity_name, deity|
        bonuses = {}
        deity.each do |k, v|
          next if %W[ai_will_do sprite allow].include?(k)
          bonuses[k] = v
        end
        deity["allow"].each do |k,v|
          raise unless k == "religion"
          @religions[v].deities[deity_name] = bonuses
        end
      end
    end
  end

  def parse_isolationism
    glob("common/isolationism/*.txt").each do |path|
      parse(path).each do |level_name, level|
        @isolationism << [level_name, level["isolation_value"], level["modifier"]]
      end
    end
  end

  def each_religion
    @religions.each do |religion_name, religion|
      # Tengri
      if religion.has_secondary?
        @religions.each do |secondary_name, secondary_religion|
          next if secondary_name == religion_name
          yield(
            "#{localization(religion_name)} + #{localization(secondary_name)}",
            secondary_religion.secondary_score
          )
        end
        next
      end

      # Hindu, Norse
      if religion.has_deities?
        religion.deities.each do |deity_name, deity|
          yield(
            "#{localization(religion_name)} + #{localization(deity_name)}",
            religion.primary_score + religion.deity_score(deity_name)
          )
        end
        next
      end

      # Shinto
      if religion.uses_isolationism?
        @isolationism.each do |level_name, level_number, bonus|
          yield(
            "#{localization(religion_name)} + #{localization(level_name)} (#{level_number})",
            religion.primary_score + bonus_score(bonus)
          )
        end
        next
      end

      # Default - Jewish, Zoroastrian, Animist, Totemism
      yield(localization(religion_name), religion.primary_score)
    end
  end

  def call
    parse_static_bonuses
    parse_deity
    parse_isolationism

    results = []
    each_religion do |name, score|
      results << [score, name]
    end

    results.sort.each do |score, name|
      puts "#{score.round(6)} - #{name}"
    end
  end
end

AnalyzeIdeaGroups.new_from_argv.call

__END__

TODO:

anglican
buddhism
catholic
confucianism
coptic
hussite
ibadi
inti
mahayana
mesoamerican_religion
nahuatl
orthodox
protestant
reformed
religious_schools
shamanism
shiite
sikhism
sunni
vajrayana

DONE:

animism
hinduism
jewish
norse_pagan_reformed
shinto
tengri_pagan_reformed
totemism
zoroastrian
