#!/usr/bin/env ruby

require "set"
require "pp"
require "pathname"
require_relative "../lib/paradox"

class AnalyzeMissions < ParadoxGame
  def initialize(*args)
    super
    @immediate = Set[]
    @effect = Set[]
  end

  def each_mission
    glob("missions/*").each do |path|
      parse(path).each do |mission|
        yield(mission)
      end
    end
  end

  def parse_effects(node)
    return [] unless node
    node.each.to_a.map{|k,v|
      # We don't care about exact numbers
      if %W[
          add_claim
          add_mil_power add_adm_power add_dip_power
          add_treasury add_prestige add_papal_influence add_mercantilism
          add_army_tradition add_legitimacy add_patriarch_authority
          add_war_exhaustion add_navy_tradition add_stability
        ].include?(k)
        v = "?"
      end
      if k == "add_casus_belli"
        v["target"] = "?"
      end

      if k == "hidden_effect" and v["remove_casus_belli"]
        nil
      else
        [k,v]
      end
    }.compact
  end

  def analyze_missions!
    each_mission do |name, mission|
      @immediate += parse_effects(mission["immediate"])
      @effect += parse_effects(mission["effect"])
    end
    puts "Immediate"
    @immediate.each do |k,v|
      puts "#{k} = #{v}"
    end
    puts ""
    puts "Effect"
    @effect.each do |k,v|
      puts "#{k} = #{v}"
    end
  end
end

AnalyzeMissions.new(*ARGV).analyze_missions!
