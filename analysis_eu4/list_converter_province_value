#!/usr/bin/env ruby

require_relative "../lib/paradox"

class TradeNode
  attr_reader :province_ids, :provinces, :outgoing
  attr_accessor :incoming_trade_value, :outgoing_trade_value
  def initialize(map, node)
    @map = map
    @province_ids = node["members"]
    @provinces = []
    @outgoing = node.find_all("outgoing").map{|n| n["name"]}
    @outgoing_trade_value = 0
    @incoming_trade_value = 0
  end

  def local_trade
    @local_trade ||= @provinces.map(&:trade_value).inject(0, &:+).round(6)
  end

  def trade_value
    local_trade + incoming_trade_value - outgoing_trade_value
  end

  def province_trade_power
    @province_trade_power ||= @provinces.map(&:trade_power).inject(0, &:+).round(6)
  end

  def total_trade_power
    # guess that 2/3 comes from provinces
    1.5 * province_trade_power
  end

  def end_node?
    @outgoing.empty?
  end
end

class Province
  attr_reader :bonus, :mods, :goods, :usable, :name
  attr_reader :base_tax, :base_production, :base_manpower
  attr_accessor :trade_node

  def initialize(game, id, node)
    @game = game
    @bonus = node.find_all("add_permanent_province_modifier").map{|mod| mod["name"]}
    @mods = merge_modifiers(@bonus)
    @goods = node["trade_goods"]
    @name = @game.localization("PROV#{id}")
    @base_tax = node["base_tax"]
    @base_production = node["base_production"]
    @base_manpower = node["base_manpower"]
  end

  def usable?
    @goods != nil
  end

  def goods_price
    @goods_price ||= if goods == nil
      raise # water or wasetland
    elsif goods == "unknown"
      # Just guess some mid-tier good
      @game.prices["fur"]
    else
      @game.prices[goods]
    end
  end

  def trade_goods_bonus
    mods["trade_goods_size"]
  end

  def trade_power_bonus
    mods["province_trade_power_value"]
  end

  def annual_gold
    if @goods == "gold"
      6 * base_production
    else
      0
    end
  end

  def annual_tax
    # +5% from +1 stab
    # +10% from neutral clergy
    @annual_tax = (1.0 * base_tax * 1.15).round(6)
  end

  def annual_production
  # There are 50% gains from tech, assume middle values
    (trade_value * 1.25).round(6)
  end

  def base_trade_power
    0.6 * base_production + trade_power_bonus
  end

  # Just guess:
  # * coastal +25%
  # * +50% from 25% mercantilism
  # maybe check what's coastal, then update stuff above
  def trade_power
    (base_trade_power * 1.75).round(6)
  end

  # Dalaskogen's +5 is equivalent to 25 extra dev in this contextgo
  def goods_produced
    (0.2 * base_production + trade_goods_bonus).round(6)
  end

  def trade_value
    (goods_produced * goods_price).round(6)
  end

  def converter_reset!
    # From average_province script
    @base_tax = 2.70
    @base_production = 2.72
    @base_manpower = 1.85
  end

  # There are 50% gains from tech, assume middle values
  def annual_trade
    (1.25 * trade_node.trade_value * trade_power / trade_node.total_trade_power).round(6)
  end

  def annual_income
    annual_tax + annual_production + annual_trade + annual_gold
  end

  # Value is based on assumption that 70% of province value is in its income
  # 30% in its base manpower
  def value
    (
      0.7 * (annual_income / average_income) +
      0.3 * (base_manpower / avearge_manpower)
    ).round(6)
  end

  private

  # From calculations above
  # It basically simplifies world to one big trade node
  def average_trade_power
    3.981490
  end

  def average_trade_value
    1.535769
  end

  def average_income
    7.181222
  end

  def avearge_manpower
    1.85 # converter base_manpower
  end

  def merge_modifiers(mods)
    bonus = Hash.new(0)
    mods.each do |name|
      @game.province_modifiers[name].each do |key, val|
        next if key == "picture"
        bonus[key] += val
      end
    end
    bonus
  end
end

class Map
  attr_reader :provinces
  def initialize(game, reset=true)
    @game = game
    @trade_nodes = {}
    @game.parse("common/tradenodes/00_tradenodes.txt").each do |name, node|
      @trade_nodes[name] = TradeNode.new(self, node)
    end
    @provinces = {}
    @game.glob("history/provinces/*.txt").each do |path|
      id = path.basename.to_s.to_i
      node = parse_province_file(path)
      province = Province.new(@game, id, node)
      next unless province.usable?
      @provinces[id] = province
      @provinces[id].converter_reset! if reset
    end
    @trade_nodes.each do |name, node|
      node.province_ids.each do |id|
        province = @provinces[id] or next
        province.trade_node = node
        node.provinces << province
      end
    end
    @provinces.each do |id, province|
      raise "No node for #{province.name}" unless province.trade_node
    end
    processed = {}
    @trade_nodes.each do |name, node|
      processed[name] = true
      next if node.end_node?
      transfer = node.trade_value * 0.5
      node.outgoing_trade_value = transfer
      node.outgoing.each do |out_name|
        raise "Cycle detected" if processed[out_name]
        # guess 5% transfer bonus, split evenly
        @trade_nodes[out_name].incoming_trade_value += 1.05 * transfer / node.outgoing.size
      end
    end
  end

  private

  def parse_province_file(path)
    # Wanted to do this:
    # parse(path)
    #
    # But due to broken shit in 6-Skane.txt we have to do this:
    content = @game.resolve(path)
      .read
      .force_encoding("windows-1252")
      .encode("utf-8")
      .gsub("add_permanent_province_modifier {", "add_permanent_province_modifier = {")
    ParadoxModFile.new(string: content, path: path).parse!
  end
end

class ListConverterProvinceValue < ParadoxGame
  def province_modifiers
    @province_modifiers ||= begin
      map = {}
      glob("common/event_modifiers/*.txt").each do |path|
        parse(path).each do |name, modifier|
          map[name] = modifier
        end
      end
      map
    end
  end

  def price_changes
    @price_changes ||= begin
      # Historical price changes are encoded in
      # history/countries/HAB - Austria.txt
      # but we can grep them all
      map = {}
      glob("history/countries/*.txt").each do |path|
        parse(path).each do |key, val|
          next unless key.is_a?(Date)
          val.find_all("change_price").each do |change|
            raise unless change["duration"] == -1
            good = change["trade_goods"]
            mod = change["value"]
            name = change["key"]
            map[good] ||= []
            map[good] << [key, name, mod]
          end
        end
      end
      map
    end
  end

  def base_prices
    @base_prices ||= begin
      map = Hash.new(0)
      parse("common/prices/00_prices.txt").each do |name, good|
        map[name] = good["base_price"]
      end
      map
    end
  end

  def prices
    @prices ||= begin
      map = base_prices.dup
      price_changes.each do |good, changes|
        average_change = 0
        changes.each do |date, name, value|
          game_part = (1821.0 - date.year) / (1821 - 1444)
          average_change += game_part * value
        end
        map[good] = (map[good] * (1 + average_change)).round(2)
      end
      map
    end
  end

  def map
    @map ||= Map.new(self)
  end

  def run!
    map.provinces.sort.each do |id, province|
      puts "#{id}\t#{province.name}\t#{province.value}"
    end
  end

  def inspect
    "#{self.class}"
  end
end

ListConverterProvinceValue.new(*ARGV).run!
