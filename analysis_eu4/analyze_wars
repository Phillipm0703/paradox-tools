#!/usr/bin/env ruby

require_relative "../lib/paradox_game"

class AnalyzeWars
  def initialize(save_game)
    @data = ParadoxModFile.new(path: save_game).parse!
    @wars = []
  end

  # Old save games use String not real Date
  def convert_date(date)
    if date.is_a?(Date)
      date
    elsif date.is_a?(String) and date =~ /\A(\d+)\.(\d+)\.(\d+)\z/
      Date.new($1.to_i, $2.to_i, $3.to_i)
    else
      raise "Expected Date or String, got `#{date.inspect}'"
    end
  end

  def start_date
    @start_date ||= convert_date(@data["start_date"])
  end

  def current_date
    @current_date ||= convert_date(@data["date"])
  end

  def add_war!(start_date, end_date=current_date)
    @wars << (start_date.year..end_date.year)
  end

  def add_active_war!(war)
    return if war["history"].empty?
    add_war! war["history"].keys.grep(Date).min
  end

  def add_previous_war!(war)
    return if war["history"].empty?
    add_war! war["history"].keys.grep(Date).min,
             war["history"].keys.grep(Date).max
  end

  def analyze_wars!
    @data.find_all("active_war").each do |active_war|
      add_active_war! active_war
    end
    @data.find_all("previous_war").each do |previous_war|
      add_previous_war! previous_war
    end
  end

  def report!
    analyze_wars!
    (start_date.year..current_date.year).each do |year|
      wars_count = @wars.count{|war_time| war_time.include?(year) }
      puts "#{year}\t#{wars_count}"
    end
  end
end

if __FILE__ == $0
  unless ARGV.size == 1
    STDERR.puts "Usage: #{$0} save_game.eu4"
    exit 1
  end

  AnalyzeWars.new(*ARGV).report!
end
