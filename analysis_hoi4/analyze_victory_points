#!/usr/bin/env ruby

require "pry"
require_relative "../lib/paradox_game"

# Assumes 50% MP bonus
class Unit
  def initialize(cav, has_mp)
    @cav = cav
    @has_mp = @has_mp
  end

  def suppression
    if @has_mp
      @cav * 3.0
    else
      @cav * 2.0
    end
  end

  def manpower
    @cav * 1000 + (@has_mp ? 500 : 0)
  end

  def ic
    @cav * 60 + (@has_mp ? 60 : 0)
  end
end

class AnalyzeVictoryPoints < ParadoxGame
  def states
    unless @states
      @states = {}
      glob("history/states/*.txt").each do |path|
        node = parse(path)["state"]
        id = node["id"]
        name = localization(node["name"])
        vps = node["history"]["victory_points"] || []
        total = vps.each_slice(2).map(&:last).inject(0, &:+)
        raise unless total = total.to_i
        total = total.to_i
        # Some names are duplicates
        raise if @states[id]
        @states[id] = {name: name, total: total}
      end
    end
    @states
  end

  def state_count_by_vp_total
    unless @state_count_by_vp_total
      @state_count_by_vp_total = Hash.new(0)
      states.each do |id, state|
        @state_count_by_vp_total[state[:total]] += 1
      end
    end
    @state_count_by_vp_total
  end

  def total_suppression_needed(mod, unit)
    total = 0
    state_count_by_vp_total.each do |vp_total, count|
      vp_total = (vp_total * mod).floor
      units_needed = (vp_total / unit.suppression).ceil
      total += count * units_needed
    end
    total
  end

  def report!
    units = {
      "1cav"    => Unit.new(1, false),
      "2cav"    => Unit.new(2, false),
      # "3cav"    => Unit.new(3, false),
      # "4cav"    => Unit.new(4, false),
      # "5cav"    => Unit.new(5, false),
      # "6cav"    => Unit.new(6, false),
      "1cav+mp" => Unit.new(1, true),
      "2cav+mp" => Unit.new(2, true),
      # "3cav+mp" => Unit.new(3, true),
      # "4cav+mp" => Unit.new(4, true),
      # "5cav+mp" => Unit.new(5, true),
      # "6cav+mp" => Unit.new(6, true),
    }
    levels = {
      "harshest" => 1.0,
      "harsh" => 0.8,
      "gentle" => 0.6,
      "gentlest" => 0.4,
    }
    levels.each do |level, mod|
      puts "To suppress the whole world at #{level} treatment you need:"
      units.each do |name, unit|
        needed = total_suppression_needed(mod, unit)
        puts "* #{name} - #{needed} divisions, #{unit.manpower*needed} men, #{unit.ic*needed} IC"
      end
      puts ""
    end
  end
end

if __FILE__ == $0
  AnalyzeVictoryPoints.new(*ARGV).report!
end
