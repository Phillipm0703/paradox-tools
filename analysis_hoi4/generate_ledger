#!/usr/bin/env ruby

require "pry"
require_relative "../lib/paradox_game"
require "json"

class CountryInformation
  def initialize(ledger, tag, country)
    @ledger = ledger
    @tag = tag
    @resources = {}
    @ic = Hash.new(0)
    @divisions = 0
    @manpower = Hash.new(0)
    @ships = Hash.new(0)
    @equipment = Hash.new(0)

    country["resources"]["produced"].each do |name, amount|
      @resources[name] = amount
    end
    add_units! country["units"]
  end

  def add_units!(units)
    return unless units
    units.each do |type, unit|
      # unit["logical_country"] # For expeditionary corps/volunteers/etc. presumably?
      case type
      when "division"
        add_division! unit
      when "navy"
        add_navy! unit
      else
        binding.pry
      end
    end
  end

  def add_owned_state!(state)
    return unless state["buildings"]
    ["dockyard", "industrial_complex", "arms_factory"].each do |type|
      next unless state["buildings"][type]
      next if state["buildings"][type] == []
      count = state["buildings"][type]["level"].size
      @ic["owned_#{type}"] += count
      @ic["owned_total"] += count
    end
  end

  def add_controlled_state!(state)
    return unless state["buildings"]
    ["dockyard", "industrial_complex", "arms_factory"].each do |type|
      next unless state["buildings"][type]
      next if state["buildings"][type] == []
      count = state["buildings"][type]["level"].size
      @ic["controlled_#{type}"] += count
      @ic["controlled_total"] += count
    end
  end

  def add_navy!(unit)
    @manpower["navy"] += unit["manpower"]
    unit.find_all("ship").each do |ship|
      @ships[ship["definition"]] += 1
      @ships["total"] += 1
    end
  end

  def add_division!(unit)
    @manpower["army"] += unit["manpower"]
    @divisions += 1
    unit["equipment"].each do |cat, equipment|
      binding.pry unless cat == "equipment"
      add_equipment! equipment
    end
  end

  def add_equipment!(equipment)
    type = @ledger.equipment[equipment["id"]]
    amount = equipment["amount"]
    @equipment[type] += amount
  end

  def to_json
    {
      resources: @resources,
      ic: @ic,
      divisions: @divisions,
      manpower: @manpower,
      ships: @ships,
      equipment: Hash[@equipment.sort],
    }
  end
end

class GenerateLedger < ParadoxGame
  attr_reader :equipment
  def initialize(save_path, *roots)
    super(*roots)
    @data = ParadoxModFile.new(path: save_path).parse!
  end

  def date
    @data["date"]
  end

  def save_report!(path, data)
    Pathname(path).parent.mkpath
    Pathname(path).write(JSON.pretty_generate(data))
  end

  def run!
    @countries = {}
    @equipment = {}
    @data["equipments"].each do |type, equipment|
      binding.pry if @equipment[equipment["id"]]
      @equipment[equipment["id"]] = type
    end
    @data["countries"].each do |tag, country|
      @countries[tag] ||= CountryInformation.new(self, tag, country)
    end
    @data["states"].each do |num, state|
      # name = localization("STATE_#{num}")
      owner = state["owner"]
      controller = state["controller"] || owner
      @countries[owner].add_owned_state! state
      @countries[controller].add_controlled_state! state
    end
    @countries.each do |tag, country|
      save_report! "ledger/#{tag}.json", country.to_json
    end
  end
end


unless ARGV.size >= 2
  STDERR.puts "Usage: #{$0} <save.hoi4> <hoi4_path> [<mod1_path> <mod2_path> ...]"
  STDERR.puts "# non-binary saves only"
  exit 1
end

GenerateLedger.new(*ARGV).run!
