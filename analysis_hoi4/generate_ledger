#!/usr/bin/env ruby

require "pry"
require_relative "../lib/paradox_game"
require "json"

class InformationTables
  def summarize_equipment_table
    Hash[
      @equipment.map do |archetype, details|
        [archetype.name, archetype.format_equipment_details(details)]
      end.sort
    ]
  end
end

class CountryInformation < InformationTables
  attr_reader :tag, :name
  attr_reader :divisions, :manpower, :ships, :equipment, :ic, :resources, :research_cost
  attr_accessor :faction
  def initialize(ledger, tag, country)
    @ledger = ledger
    @tag = tag
    @original_tag = country["original_tag"] || @tag
    @resources = Hash.new(0)
    @ic = Hash.new(0)
    @divisions = 0
    @manpower = Hash.new(0)
    @ships = Hash.new(0)
    @equipment = {}
    @faction = "Neutrals"
    @ideology = country["politics"]["ruling_party"]
    @name = ledger.localization("#{@original_tag}_#{@ideology}")

    @research_cost = 0
    (country["technology"]["technologies"] || {}).each do |name, tech|
      next unless tech["level"]
      raise unless tech["level"] == 1
      if ledger.technology_cost[name]
        @research_cost += ledger.technology_cost[name]
      else
        warn "Unknown tech: `#{name}' for #{@tag}"
      end
    end

    country["resources"]["produced"].each do |name, amount|
      raise unless amount == amount.to_i
      @resources[name] = amount.to_i
    end
    add_equipments! country["production"]["equipments"]
    add_units! country["units"]
    add_deployment! country["deployment"]
  end

  def add_deployment!(deployment)
    return unless deployment
    deployment.each do |type, data|
      next unless type == "military_deployment_conveyor"
      data.find_all("military_deployment_line").each do |line|
        add_unit_in_training! line["military_deployment"]
      end
    end
  end

  def add_unit_in_training!(unit)
    @manpower["training"] += unit["manpower"] if unit["manpower"]
    add_equipments! unit["equipment"] if unit["equipment"]
  end

  def add_units!(units)
    return unless units
    units.each do |type, unit|
      # unit["logical_country"] # For expeditionary corps/volunteers/etc. presumably?
      case type
      when "division"
        add_division! unit
      when "navy"
        add_navy! unit
      else
        binding.pry
      end
    end
  end

  def add_owned_state!(state)
    return unless state["buildings"]
    ["dockyard", "industrial_complex", "arms_factory"].each do |type|
      next unless state["buildings"][type]
      next if state["buildings"][type] == []
      count = state["buildings"][type]["level"].size
      @ic["owned_#{type}"] += count
      @ic["owned_total"] += count
    end
  end

  def add_controlled_state!(state)
    return unless state["buildings"]
    ["dockyard", "industrial_complex", "arms_factory"].each do |type|
      next unless state["buildings"][type]
      next if state["buildings"][type] == []
      count = state["buildings"][type]["level"].size
      count_working = state["buildings"][type]["level"].select{|lvl| lvl == 100}.size
      @ic["controlled_#{type}"] += count
      @ic["controlled_total"] += count
      @ic["working_#{type}"] += count_working
      @ic["working_total"] += count_working
    end
  end

  def add_navy!(unit)
    @manpower["navy"] += unit["manpower"]
    unit.find_all("ship").each do |ship|
      @ships[ship["definition"]] += 1
      @ships["total"] += 1
    end
  end

  def add_division!(unit)
    @manpower["army"] += unit["manpower"]
    @divisions += 1
    add_equipments! unit["equipment"]
  end

  def add_equipments!(equipments)
    equipments.each do |cat, equipment|
      binding.pry unless cat == "equipment"
      add_equipment! equipment
    end
  end

  def add_equipment!(equipment_node)
    amount = equipment_node["amount"]
    id = equipment_node["id"]
    equipment = @ledger.id_to_equipment[id]
    archetype = equipment.archetype
    @equipment[archetype] ||= Hash.new(0)
    @equipment[archetype][equipment] += amount
  end

  def add_air_force!(air_force)
    air_force.find_all("air_wing_pool").each do |air_wing_pool|
      air_wing_pool.find_all("air_wings").each do |air_wing|
        @manpower["air"] += air_wing["manpower"]
        add_equipments! air_wing["equipment"]
      end
    end
  end

  def to_json
    {
      name: @name,
      ideology: @ideology,
      faction: @faction,
      research_cost: @research_cost,
      resources: Hash[@resources.sort],
      ic: Hash[@ic.sort],
      divisions: @divisions,
      manpower:  Hash[@manpower.sort],
      ships:  Hash[@ships.sort],
      equipment: summarize_equipment_table,
    }
  end
end

class FactionInformation < InformationTables
  def initialize(ledger, name)
    @ledger = ledger
    @name = name
    @countries = []
    @resources = Hash.new(0)
    @ic = Hash.new(0)
    @divisions = 0
    @manpower = Hash.new(0)
    @ships = Hash.new(0)
    @equipment = {}
  end

  def add_country!(country)
    @divisions += country.divisions
    country.manpower.each do |cat, count|
      @manpower[cat] += count
    end
    country.resources.each do |cat, count|
      @resources[cat] += count
    end
    country.ic.each do |cat, count|
      @ic[cat] += count
    end
    country.ships.each do |cat, count|
      @ships[cat] += count
    end
    country.equipment.each do |archetype, details|
      @equipment[archetype] ||= Hash.new(0)
      details.each do |equipment, count|
        @equipment[archetype][equipment] += count
      end
    end
  end

  def to_json
    {
      name: @name,
      resources: Hash[@resources.sort],
      ic: Hash[@ic.sort],
      divisions: @divisions,
      manpower:  Hash[@manpower.sort],
      ships: Hash[@ships.sort],
      equipment: summarize_equipment_table,
    }
  end
end

class WarInformation
  def initialize(ledger, war)
    @ledger = ledger
    @name = war["name"]
    @attackers = war["attackers"]
    @defenders = war["defenders"]
    @attacker_casualties = 0
    @defender_casualties = 0
    war["casualties"].each do |tag, count|
      if @attackers.include?(tag)
        @attacker_casualties += count
      elsif @defenders.include?(tag)
        @defender_casualties += count
      else
        binding.pry
      end
    end
  end

  def to_json
    {
      name: @name,
      attackers: @attackers,
      defenders: @defenders,
      attacker_casualties: @attacker_casualties,
      defender_casualties: @defender_casualties,
    }
  end
end

class EquipmentArchetype
  attr_reader :name
  def initialize(name)
    @name = name
    @equipment = {}
    @lookup = {}
  end

  def add!(equipment, subgroup)
    @equipment[subgroup] ||= []
    @equipment[subgroup] << equipment
    @lookup[equipment] = [subgroup, @equipment[subgroup].size-1]
  end

  def default_level
    @equipment[nil][0]
  end

  def default_only?
    @lookup.values == [[nil, 0]]
  end

  def inspect
    "EquipmentArchetype<#{@name}>"
  end

  def format_equipment_details(details)
    total = adjust_precision(details.values.inject(0, &:+))
    result = "#{total}"
    unless default_only?
      subgroups = {}
      details.each do |equipment, amount|
        subgroup, level = @lookup[equipment]
        subgroups[subgroup] ||= []
        raise if subgroups[subgroup][level]
        subgroups[subgroup][level] = adjust_precision(amount)
      end
      # Fill with zeroes if only new equipment present
      subgroups.sort_by{|k,_| k||""}.each do |subgroup, counts|
        subtotals = counts.map{|c| c || 0}.join(" ")
        if subgroup
          result << " #{subgroup}:[#{subtotals}]"
        else
          result << " [#{subtotals}]"
        end
      end
    end
    result
  end

  private

  def adjust_precision(x)
    x = x.round(3)
    return x.to_i if x == x.to_i
    x
  end
end

class Equipment
  attr_reader :name, :archetype
  def initialize(name, archetype)
    @name = name
    @archetype = archetype
  end

  def inspect
    "Equipment<#{@name} : #{@archetype.name}>"
  end
end

class GenerateLedger < ParadoxGame
  attr_reader :id_to_equipment, :technology_cost
  def initialize(save_path, *roots)
    @save_path = Pathname(save_path)
    super(*roots)
    @data = ParadoxModFile.new(path: save_path).parse!
  end

  def date
    @data["date"]
  end

  def save_report!(path, data)
    Pathname(path).parent.mkpath
    Pathname(path).write(JSON.pretty_generate(data) + "\n")
  end

  def setup_equipment_mapping!
    @archetypes = {}
    @equipments = {}
    glob("common/units/equipment/*.txt").each do |path|
      parse(path)["equipments"].each do |name, equipment|
        next if equipment["is_archetype"]
        archetype_name = equipment["archetype"]
        # It's treated as light tank by archetype, but shouldn't
        archetype_name = "gw_tank_equipment" if name == "gw_tank_equipment"
        if equipment["carrier_capable"] and archetype_name =~ /\Acv_(.*)/
          archetype_name = $1
          subgroup = "cv"
        else
          subgroup = nil
        end
        archetype = @archetypes[archetype_name] ||= EquipmentArchetype.new(archetype_name)
        equipment = @equipments[name] = Equipment.new(name, archetype)
        archetype.add!(equipment, subgroup)
      end
    end
    @id_to_equipment = {}
    @data["equipments"].each do |type, equipment|
      id = equipment["id"]
      binding.pry if @id_to_equipment[id]
      if @equipments[type]
        @id_to_equipment[id] = @equipments[type]
      else
        # Seems like a weird bug. Assume creating archetype is same as creating level 0
        @id_to_equipment[id] = @archetypes[type].default_level
      end
    end
  end

  def setup_technology_mapping!
    @technology_cost = {}
    glob("common/technologies/*.txt").each do |path|
      parse(path)["technologies"].each do |name, tech|
        next unless tech.is_a?(PropertyList)
        @technology_cost[name] = tech["research_cost"]
      end
    end
  end

  def analyze_country_information!
    @countries = {}
    @data["countries"].each do |tag, country|
      @countries[tag] ||= CountryInformation.new(self, tag, country)
    end
    @data["states"].each do |num, state|
      owner = state["owner"]
      controller = state["controller"] || owner
      @countries[owner].add_owned_state! state
      @countries[controller].add_controlled_state! state
    end
    @data["strategic_air"].each do |tag, air_force|
      next if tag == "air_base" or tag == "rocket_site"
      @countries[tag].add_air_force! air_force
    end
  end

  def ranking_ships
    Hash[
      @countries
        .values
        .map{|c| [c.name, c.ships["total"]]}
        .sort_by{|n,v| [-v,n]}
        .select{|v,n| n > 0}
    ]
  end

  def ranking_army
    Hash[
      @countries
        .values
        .map{|c| [c.name, c.manpower["army"]]}
        .sort_by{|n,v| [-v,n]}
        .select{|v,n| n > 0}
    ]
  end

  def ranking_ic
    Hash[
      @countries
        .values
        .map{|c| [c.name, c.ic["controlled_total"]]}
        .sort_by{|n,v| [-v,n]}
        .select{|v,n| n > 0}
    ]
  end

  def ranking_research
    Hash[
      @countries
        .values
        .map{|c| [c.name, c.research_cost]}
        .sort_by{|n,v| [-v,n]}
        .select{|v,n| n > 0}
    ]
  end

  def save_reports!
    system "trash", "ledger" if Pathname("ledger").exist?
    @countries.each do |tag, country|
      save_report! "ledger/country/#{tag}.json", country.to_json
    end
    @factions.each do |name, faction|
      save_report! "ledger/factions/#{name}.json", faction.to_json
    end
    @wars.each do |name, war|
      save_report! "ledger/wars/#{name}.json", war.to_json
    end
    save_report! "ledger/rankings/ships.json", ranking_ships
    save_report! "ledger/rankings/army.json", ranking_army
    save_report! "ledger/rankings/ic.json", ranking_ic
    save_report! "ledger/rankings/research.json", ranking_research
  end

  def analyze_faction_information!
    @factions = {}
    @data.find_all("faction").each do |faction|
      name = faction["name"]
      faction["members"].each do |tag|
        @countries[tag].faction = name
      end
    end
    @countries.each do |tag, country|
      faction_name = country.faction
      @factions[faction_name] ||= FactionInformation.new(self, faction_name)
      @factions[faction_name].add_country! country
    end
  end

  def analyze_wars!
    @wars = {}
    @data.find_all("active_war").each do |war|
      @wars[war["name"]] = WarInformation.new(self, war)
    end
  end

  def run!
    setup_equipment_mapping!
    setup_technology_mapping!
    analyze_country_information!
    analyze_faction_information!
    analyze_wars!
    save_reports!
  end

  def inspect
    "Ledger<#{@save_path}>"
  end
end


unless ARGV.size >= 2
  STDERR.puts "Usage: #{$0} <save.hoi4> <hoi4_path> [<mod1_path> <mod2_path> ...]"
  STDERR.puts "# non-binary saves only"
  exit 1
end

GenerateLedger.new(*ARGV).run!
