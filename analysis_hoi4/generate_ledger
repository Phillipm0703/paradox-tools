#!/usr/bin/env ruby

require_relative "../lib/paradox_game"
require_relative "ledger/equipment"
require_relative "ledger/equipment_archetype"
require_relative "ledger/information_tables"
require_relative "ledger/country_information"
require_relative "ledger/faction_information"
require_relative "ledger/war_information"
require "json"

class GenerateLedger < ParadoxGame
  attr_reader :id_to_equipment, :technology_cost
  def initialize(save_path, *roots)
    @save_path = Pathname(save_path)
    super(*roots)
    @data = ParadoxModFile.new(path: save_path).parse!
  end

  def date
    @data["date"]
  end

  def save_report!(path, data)
    Pathname(path).parent.mkpath
    Pathname(path).write(JSON.pretty_generate(data) + "\n")
  end

  def setup_equipment_mapping!
    @archetypes = {}
    @equipments = {}
    nodes = {}
    glob("common/units/equipment/*.txt").each do |path|
      parse(path)["equipments"].each do |name, equipment|
        nodes[name] = equipment
        next if equipment["is_archetype"]
        archetype_name = equipment["archetype"]
        # It's treated as light tank by archetype, but shouldn't
        archetype_name = "gw_tank_equipment" if name == "gw_tank_equipment"
        if equipment["carrier_capable"] and archetype_name =~ /\Acv_(.*)/
          archetype_name = $1
          subgroup = "cv"
        else
          subgroup = nil
        end
        archetype = @archetypes[archetype_name] ||= EquipmentArchetype.new(archetype_name)
        equipment = @equipments[name] = Equipment.new(name, archetype, equipment, nodes[archetype_name])
        archetype.add!(equipment, subgroup)
      end
    end
    @id_to_equipment = {}
    @data["equipments"].each do |type, equipment|
      id = equipment["id"]
      binding.pry if @id_to_equipment[id]
      if @equipments[type]
        @id_to_equipment[id] = @equipments[type]
      else
        # Seems like a weird bug. Assume creating archetype is same as creating level 0
        @id_to_equipment[id] = @archetypes[type].default_level
      end
    end
  end

  def setup_technology_mapping!
    @technology_cost = {}
    glob("common/technologies/*.txt").each do |path|
      parse(path)["technologies"].each do |name, tech|
        next unless tech.is_a?(PropertyList)
        @technology_cost[name] = tech["research_cost"]
      end
    end
  end

  def analyze_country_information!
    @countries = {}
    @data["countries"].each do |tag, country|
      # This seems to be good enough filter for inactive Dxx tags
      next if country["original_capital"] == 0 and country["original_tag"] == nil
      @countries[tag] ||= CountryInformation.new(self, tag, country)
    end
    @data["states"].each do |num, state|
      owner = state["owner"]
      controller = state["controller"] || owner
      @countries[owner].add_owned_state! state
      @countries[controller].add_controlled_state! state
    end
    @data["strategic_air"].each do |tag, air_force|
      next if tag == "air_base" or tag == "rocket_site"
      next unless air_force["air_wing_pool"]
      @countries[tag].add_air_force! air_force
    end
  end

  def ranking_ships
    Hash[
      @countries
        .values
        .map{|c| [c.name, c.ships["total"]]}
        .sort_by{|n,v| [-v,n]}
        .select{|v,n| n > 0}
    ]
  end

  def ranking_army
    Hash[
      @countries
        .values
        .map{|c| [c.name, c.manpower["army"]]}
        .sort_by{|n,v| [-v,n]}
        .select{|v,n| n > 0}
    ]
  end

  def ranking_ic
    Hash[
      @countries
        .values
        .map{|c| [c.name, c.ic["controlled_total"]]}
        .sort_by{|n,v| [-v,n]}
        .select{|v,n| n > 0}
    ]
  end

  def ranking_research
    Hash[
      @countries
        .values
        .map{|c| [c.name, c.research_cost]}
        .sort_by{|n,v| [-v,n]}
        .select{|v,n| n > 0}
    ]
  end

  def save_reports!
    system "trash", "ledger" if Pathname("ledger").exist?
    @countries.each do |tag, country|
      save_report! "ledger/country/#{tag}.json", country.to_json
    end
    @factions.each do |name, faction|
      save_report! "ledger/factions/#{name}.json", faction.to_json
    end
    @wars.each do |name, war|
      save_report! "ledger/wars/#{name}.json", war.to_json
    end
    save_report! "ledger/rankings/ships.json", ranking_ships
    save_report! "ledger/rankings/army.json", ranking_army
    save_report! "ledger/rankings/ic.json", ranking_ic
    save_report! "ledger/rankings/research.json", ranking_research
  end

  def analyze_faction_information!
    @factions = {}
    @data.find_all("faction").each do |faction|
      name = faction["name"]
      faction["members"].each do |tag|
        @countries[tag].faction = name
      end
    end
    @countries.each do |tag, country|
      faction_name = country.faction
      @factions[faction_name] ||= FactionInformation.new(self, faction_name)
      @factions[faction_name].add_country! country
    end
  end

  def analyze_wars!
    @wars = {}
    @data.find_all("active_war").each do |war|
      warinfo = WarInformation.new(self, war)
      @wars[warinfo.name] = warinfo
    end
  end

  def run!
    setup_equipment_mapping!
    setup_technology_mapping!
    analyze_country_information!
    analyze_faction_information!
    analyze_wars!
    save_reports!
  end

  def inspect
    "Ledger<#{@save_path}>"
  end
end

unless ARGV.size >= 2
  STDERR.puts "Usage: #{$0} <save.hoi4> <hoi4_path> [<mod1_path> <mod2_path> ...]"
  STDERR.puts "# non-binary saves only"
  exit 1
end

GenerateLedger.new(*ARGV).run!
