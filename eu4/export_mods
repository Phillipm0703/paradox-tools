#!/usr/bin/env ruby

require "fileutils"
require_relative "../lib/paradox"


class ExportMod
  def initialize(mod_path, export_path)
    @mod_path = mod_path
    @export_path = export_path
    @mod = ParadoxModFile.new(path: @mod_path).parse!
  end

  def data_path
    @data_path ||= @mod_path.parent.parent + @mod["path"]
  end

  def archive_path
    @archive_path ||= translate_archive_path(@mod["archive"])
  end

  def mode
    @mode ||= begin
      raise "#{name} can't have both path and archive" if  @mod["path"] and @mod["archive"]
      raise "#{name} needs path or archive" unless  @mod["path"] or @mod["archive"]
      if @mod["archive"]
        "archive"
      else
        "data"
      end
    end
  end

  def archive?
    mode == "archive"
  end

  def name
    @name ||= @mod["name"]
  end

  def translate_archive_path(path)
    steam_workshop_dir + path.gsub("\\\\", "/").gsub(/\AC:/, "/cygdrive/c").gsub(/\AD:/, "/cygdrive/d")
  end

  def mod_name
    "#{basename} #{name}"
  end

  def export_mod_path
    @export_path + "#{mod_name}.mod"
  end

  def export_data_path
    @export_path + mod_name
  end

  def basename
    @basename ||= if archive?
      Pathname(archive_path).basename("_legacy.bin").to_s
    else
      Pathname(data_path).basename.to_s
    end
  end

  def sh(*args)
    puts args.join(" ")
    system *args
  end

  def call
    if archive?
      export_data_path.mkpath
      Dir.chdir(export_data_path){ sh *%W[7za x #{archive_path}] }
    else
      export_data_path.parent.mkpath
      sh *%W[cp -a #{data_path} #{export_data_path}]
    end

    if archive?
      @mod.delete!("archive")
      @mod["path"] = "mod/#{mod_name}"
    else
      @mod["path"] = "mod/#{mod_name}"
    end

    export_mod_path.write(ParadoxModFileSerializer.serialize(@mod))
  end

  def steam_workshop_dir
    Pathname("/cygdrive/c/Program Files (x86)/Steam/")
  end
end
  
class ExportMods
  # These don't seem to be directly in win32 registry
  def mod_dir
    Pathname("/cygdrive/c/Users/taw/Documents/Paradox Interactive/Europa Universalis IV/mod")
  end

  def export_path
    Pathname("output/eu4_mods")
  end

  def call
    if export_path.exist?
      system *%W[trash #{export_path}]
    end
    export_path.mkpath
    mod_dir.children.each do |path|
      next unless path.file? and path.extname == ".mod"
      ExportMod.new(path, export_path).call
    end
  end
end

ExportMods.new.call
