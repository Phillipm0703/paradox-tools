#!/usr/bin/env ruby

require_relative "../lib/paradox_game"
require_relative "eu4_save"

class Array
  def average
    inject(0.0, &:+) / size
  end
end

class AnalyzeInstitutions
  def initialize(save_game)
    @save = EU4Save.new(save_game)
  end

  def total_penalty(country)
    country.institutions.zip(@save.institutions_penalties).map{|i,p| (1-i)*p}.inject(0, &:+)
  end

  def countries
    @countries ||= begin
      result = []
      @save.countries.each do |tag, country|
        next if country.num_of_cities == 0
        result << {
          tag: tag,
          penalty: total_penalty(country),
          tech_group: country.technology_group,
        }
      end
      result
    end
  end

  def call
    date = @save.date.to_s
    result = countries
             .group_by{|x| x[:tech_group]}
             .map{|t,r|
               [t, r.map{|u| u[:penalty]}.average.round(6)]
             }
             .sort_by(&:last)
             .to_h
    p [date, result]
  end
end

ARGV.each do |path|
  AnalyzeInstitutions.new(path).call
end
