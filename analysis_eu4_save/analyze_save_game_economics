#!/usr/bin/env ruby

# This script runs some savegame analysis for better idea what's going on with
# game economics. Primarily to calibrate bonus_scoring function

# The lists change every patch, and is poorly maintained

require_relative "../lib/paradox_game"

module Enumerable
  def avg
    sum / size.to_f
  end
end

class Country
  attr_reader :tag, :node

  def initialize(tag, node)
    @tag = tag
    @node = node
  end

  def development
    @node["development"] || 0
  end

  def exist?
    development > 0
  end

  # FIXME: This is no longer correct as of 1.22, there's extra thing on the list
  def income
    return nil unless @node["ledger"]["lastyearincome"]
    # 15 vs 16
    Hash[%W[
      taxation
      production
      trade
      gold
      tariffs
      vassals
      ?6
      subsidies
      war_reparations
      interest
      gift
      events
      spoils_of_war
      ?13
      ?14
      ?15
      knowledge_sharing
    ].zip(@node["ledger"]["lastyearincome"])]
  end

    # trade production trade gold tariffs vassals
    # harbor_fees subsidies war_reparations interest gift
    # events spoils_of_war treasure_fleet siphon_income

  def expense
    return nil unless @node["ledger"]["lastyearexpense"]
    Hash[%W[
      advisors_maint
      interest
      state_maint
      ?3
      subsidies
      war_reparations
      army_maint
      fleet_maint
      fort_maitnt
      colonies
      missionaries
      army_build
      fleet_build
      fort_build
      buildings
      ?15
      repaid_loans
      gift
      advisor_hire
      events
      peace
      vassal_fee
      outgoing_tariffs
      ?23
      ?24
      ?25
      ?26
      root_out_corruption
      embrace_institutions
      great_power_actions
      knowledge_sharing
    ].zip(@node["ledger"]["lastyearexpense"])]
  end

  # advisor_upkeep interest harbor_fees subsidies war_reparations
  # army_upkeep fleet_upkeep fort_upkeep colony_upkeep missionary_upkeep
  # army_build fleet_build fort_build buildings rebel_support
  # repaid_loans gift advisor_recruit event peace
  # vassal_fee outgoing_tariff support_loyalists send_officers siphoned_by_overlord
end

class AnalyzeSaveGameEconomics
  def initialize(save_game)
    @data = ParadoxModFile.new(path: save_game).parse!
  end

  def countries
    @countries ||= begin
      @data["countries"].to_h.map{|tag,node| [tag, Country.new(tag, node)] }.to_h
    end
  end

  # In-game ranking like score are ridiculous, so doing this instead
  # Player will be great power in 50 years, that is pretty much guaranteed,
  # so these are relevant comparison point
  def great_powers
    @great_powers ||= countries.keys.sort_by{|tag| -countries[tag].development}[0,25]
  end

  def number_of_countries
    countries.values.count(&:exist?)
  end

  def report_great_powers_income!
    totals = Hash.new(0.0)
    great_powers.each do |tag|
      income = countries[tag].income
      total_income = income.values.sum
      income.each do |type, val|
        totals[type] ||= []
        totals[type] += 100.0 * val / total_income / great_powers.size
      end
    end
    puts "Great power income:"
    totals.sort_by{|k,v| -v}.each do |type, val|
      next if val == 0
      puts "* #{type} - #{val.round(2)}"
    end
  end

  def report_great_powers_expense!
    totals = Hash.new(0.0)
    great_powers.each do |tag|
      expense = countries[tag].expense
      total_expense = expense.values.sum
      expense.each do |type, val|
        totals[type] ||= []
        totals[type] += 100.0 * val / total_expense / great_powers.size
      end
    end
    puts "Great power expense:"
    totals.sort_by{|k,v| -v}.each do |type, val|
      next if val == 0
      puts "* #{type} - #{val.round(2)}"
    end
  end

  def call
    puts "Number of countries: #{number_of_countries}"
    report_great_powers_income!
    report_great_powers_expense!
  end
end

unless ARGV.size == 1
  STDERR.puts "Usage: #{$0} save_game.eu4"
  exit 1
end

AnalyzeSaveGameEconomics.new(*ARGV).call
