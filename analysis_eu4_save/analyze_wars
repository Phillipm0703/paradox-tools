#!/usr/bin/env ruby

require_relative "./eu4_save_analysis"

class AnalyzeWars < EU4SaveAnalysis
  def last_war_date
    (@save.active_wars + @save.previous_wars).flat_map{|w| w["history"].keys.grep(Date)}.max
  end

  def current_date
    # New save format no longer stores this information in any convenient way
    @current_date ||= last_war_date || start_date
  end

  def add_war!(start_date, end_date=current_date)
    @wars << (start_date.year..end_date.year)
  end

  def add_active_war!(war)
    return if war["history"].keys.grep(Date).empty?
    add_war! war["history"].keys.grep(Date).min
  end

  def add_previous_war!(war)
    return if war["history"].keys.grep(Date).empty?
    add_war! war["history"].keys.grep(Date).min,
             war["history"].keys.grep(Date).max
  end

  def analyze_wars!
    @wars = []
    @save.active_wars.each do |active_war|
      add_active_war! active_war
    end
    @save.previous_wars.each do |previous_war|
      add_previous_war! previous_war
    end
  end

  def call
    analyze_wars!
    (@save.start_date.year..current_date.year).each do |year|
      wars_count = @wars.count{|war_time| war_time.include?(year) }
      puts "#{year}\t#{wars_count}"
    end
  end
end

if $0 == __FILE__
  AnalyzeWars.new_from_argv.call
end
