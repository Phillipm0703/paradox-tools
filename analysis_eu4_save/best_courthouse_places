#!/usr/bin/env ruby

require_relative "../lib/paradox_game"
require_relative "eu4_save"

class BestCourthousePlaces < ParadoxGame
  def country_name(tag)
    @save.countries[tag]&.name || localization(tag)
  end

  def initialize(save_game, *roots)
    super(*roots)
    @save = EU4Save.new(save_game)
  end

  def call
    courthouses = []
    town_halls = []

    # This is capped linear, so really very little logic is required
    #
    # * it ignores that cap is 1% not 0% (almost always doesn't matter)
    # * this is wrong for Merchant Republics as they have trade company vs territory cap backwards
    # * this is wrong for capital state (where discount is -100%)
    #
    # Pirate republics +75% cost does not change this logic
    # Statehouse's -20%/-40% only changes this logic if in territory/trade company

    @save.provinces.each do |id, province|
      next unless province.owner

      # Could also include subjects
      next unless province.owner == @save.player_tag

      has_courthouse = province.buildings.include?("courthouse")
      has_town_hall = province.buildings.include?("town_tall")
      dev = province.development
      dev = dev.to_i if dev == dev.to_i

      # Has it all, we're done
      next if has_town_hall

      # Worth it everywhere
      unless has_courthouse
        courthouses << [dev, province.name]
      end

      # Will hit cap for Town Hall
      next if province.territory? and not province.trade_company?

      unless province.buildings.include?("town_hall")
        town_halls << [dev, province.name]
      end
    end

    puts "Courthouses to build:"
    courthouses.sort_by{|d,n| [-d,n]}.each do |row|
      puts row.join("\t")
    end

    puts "", "Town Halls to build:"
    town_halls.sort_by{|d,n| [-d,n]}.each do |row|
      puts row.join("\t")
    end
  end
end

unless ARGV.size >= 2
  STDERR.puts "Usage: #{$0} <save.eu4> <root> [<mod1> <mod2> ... ] # non-compressed save only"
  exit 1
end

BestCourthousePlaces.new(*ARGV).call
