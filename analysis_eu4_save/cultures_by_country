#!/usr/bin/env ruby

require_relative "./eu4_save_analysis"

class CulturesByCountry < EU4SaveAnalysis
  def cultures_by_development
    @cultures_by_development ||= begin
      totals = Hash.new(0)
      @save.provinces.each do |id, province|
        next unless province.city?
        next unless province.owner
        totals[province.culture] += province.development
      end
      totals
    end
  end

  def cultures_by_country
    @cultures_by_country ||= begin
      totals = {}
      @save.provinces.each do |id, province|
        next unless province.city?
        next unless province.owner
        if province.development == 0
          # warn "Zero development province #{province.id} #{province.name}"
          next
        end
        totals[province.owner] ||= Hash.new(0)
        totals[province.owner][province.culture] += province.development
      end
      totals
    end
  end

  def same_culture_group?(a, b)
    culture_to_culture_group[a] == culture_to_culture_group[b]
  end

  def culture_status(tag, culture)
    country = @save.countries[tag]
    return "primary" if culture == country.primary_culture
    return "accepted" if country.accepted_cultures.include?(culture)
    if same_culture_group?(culture, country.primary_culture)
      if country.government_rank == 3
        "union"
      else
        "related"
      end
    else
      nil
    end
  end

  def call
    country_sizes.sort_by(&:last).reverse.each do |tag, size|
      puts "#{country_name(tag)}:"
      cultures = cultures_by_country[tag]
      cultures.sort_by(&:last).reverse.each do |culture_name, dev|
        status =  culture_status(tag, culture_name)
        status = " [#{status}]" if status
        total = cultures_by_development[culture_name]
        puts "* #{localization(culture_name)}#{status} - #{dev.round} / #{total.round}"
      end
      puts ""
    end
  end
end

if $0 == __FILE__
  CulturesByCountry.new_from_argv.call
end
