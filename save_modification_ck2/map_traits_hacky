#!/usr/bin/env ruby

# This is a fallback version of map_traits script
# that uses regular expressions to achieve the same effect

require_relative "../lib/paradox"
require "pathname"

class MapTraits
  def initialize(*args)
    unless args.size == 3
      STDERR.puts "Usage: #{$0} <traits-map.txt> <save_in.ck2> <save_out.ck2> # non-compressed save only"
      exit 1
    end
    @traits_map_path = Pathname(args[0])
    @save_in = Pathname(args[1])
    @save_out = Pathname(args[2])
    traits_map
    raise "#{@save_in} doesn't exist" unless @save_in.exist?
    raise "#{@save_out} already exists" if @save_out.exist?
  end

  def traits_map
    @traits_map ||= begin
      map = {}
      raise "#{@traits_map_path} doesn't exist" unless @traits_map_path.exist?
      @traits_map_path.readlines.each do |line|
        raise "Bad line: #{line}" unless line.strip =~ /\A(\d+)\s+(\d+)\z/
        a, b = $1.to_i, $2.to_i
        raise "Trait #{a} already mapped" if map[a]
        map[a] = b
      end
      map
    end
  end

  def map_traits(traits)
    traits = traits
      .split
      .map(&:to_i)
      .map{|t| traits_map[t] || t}
      .select{|t| t != 0}
      .uniq
    traits.join(" ")
  end

  def run!
    save = @save_in.read.force_encoding("windows-1252").encode("UTF-8")
    save.gsub!(/traits\s*=\s*\{\s*\K[\d ]*?(?=\s*\})/) do
      map_traits($&)
    end
    save = save.encode("windows-1252")
    @save_out.write(save)
  end
end

MapTraits.new(*ARGV).run!
