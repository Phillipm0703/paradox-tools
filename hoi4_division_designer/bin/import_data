#!/usr/bin/env ruby

require_relative "../../lib/paradox_game"
require "pathname"
require "json"

class ImportData < ParadoxGame
  def initialize(*roots)
    super(*roots)
  end

  def jsonify(obj)
    return obj.map{|e| jsonify(e)} if obj.is_a?(Array)
    return obj unless obj.is_a?(PropertyList)
    obj.to_h.sort.map{|k,v|
      [k, jsonify(v)]
    }.to_h
  end

  def each_unit
    glob("common/units/*.txt").each do |path|
      parse(path)["sub_units"].each do |name, unit|
        yield(name, jsonify(unit).merge("name" => localization(name)))
      end
    end
  end

  def units_data
    result = {}
    each_unit do |name, unit|
      raise "Duplicate name: #{name}" if result[name]
      bonuses = {}
      unit_data = {}
      unit.each do |key, value|
        case key
        when "forest", "marsh", "hills", "urban", "mountain",
             "jungle", "amphibious", "river", "fort", "plains",
             "desert"
          bonuses[key] = value
        when "priority", "ai_priority", "sprite", "map_icon_category"
          # Skip
        else
          unit_data[key] = value
        end
      end

      unit_data["bonuses"] = bonuses
      result[name] = unit_data
    end
    result
  end

  def each_equipment
    glob("common/units/equipment/*.txt").each do |path|
      parse(path)["equipments"].each do |name, equipment|
        yield(name, jsonify(equipment).merge("name" => localization(name)))
      end
    end
  end

  def equipment_data
    valid_keys = %W[
      soft_attack hard_attack air_attack
      defense breakthrough ap_attack armor_value
      build_cost_ic maximum_speed archetype hardness
      resources reliability type
      name archetype
    ]
    # Mostly visual stuff
    ignore_keys = %W[
      visual_level picture priority lend_lease_cost interface_category
      can_convert_from sprite group_by
    ]
    result = {}
    archetypes = {}
    each_equipment do |name, equipment|
      equipment = equipment.to_h
      if equipment["is_archetype"]
        equipment.delete("is_archetype")
        raise "Archetype is buildable" if equipment.delete("is_buildable")
        archetypes[name] = equipment
      else
        if equipment["archetype"]
          archetype = archetypes[equipment["archetype"]] or raise
          equipment = archetype.merge(equipment)
        end
        # Guided missiles - not buildable, but pass them through anyway
        # next if equipment["is_buildable"] == false
        result[name] = equipment
        ignore_keys.each do |key|
          equipment.delete(key)
        end
        # There's still a lot of keys we copy without using
        # Mostly air/naval stuff
      end
    end
    result
  end

  def each_technology
    glob("common/technologies/*.txt").each do |path|
      parse(path)["technologies"].each do |key, tech|
        next if key =~ /\A@\d+\z/ and tech.is_a?(Integer)
        yield(key, jsonify(tech).merge("name" => localization(key)))
      end
    end
  end

  def technology_data
    result = {}
    each_technology do |name, tech|
      tech.delete "ai_will_do"
      tech.delete "folder"
      tech.delete "ai_research_weights"
      result[name] = tech
    end
    result
  end

  def call
    data = {
      units: units_data,
      equipment: equipment_data,
      technology: technology_data,
    }
    Pathname("#{__dir__}/../data/data.json").write JSON.pretty_generate(data)
  end
end

ImportData.new(*ARGV).call
