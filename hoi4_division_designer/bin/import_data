#!/usr/bin/env ruby

require_relative "../../lib/paradox_game"
require "pathname"
require "json"

class ImportData < ParadoxGame
  def initialize(*roots)
    super(*roots)
  end

  def each_unit
    glob("common/units/*.txt").each do |path|
      parse(path)["sub_units"].each do |name, unit|
        yield(name, unit)
      end
    end
  end

  def units_data
    result = {}
    each_unit do |name, unit|
      raise "Duplicate name: #{name}" if result[name]
      bonuses = {}
      unit_data = {}
      unit.each do |key, value|
        case key
        when "combat_width", "max_strength", "max_organisation",
          "default_morale", "manpower", "training_time",
          "suppression", "weight", "supply_consumption",
          "maximum_speed"
          unit_data[key] = value
        when "need"
          unit_data["need"] = value.to_h
        when "forest", "marsh", "hills", "urban", "mountain",
             "jungle", "amphibious", "river", "fort", "plains",
             "desert"
          bonuses[key] = value.to_h
        when "priority", "ai_priority", "sprite", "map_icon_category"
          # Skip
        else
          # warn "Unknown key #{key}"
        end
      end

      unit_data["bonuses"] = bonuses
      result[name] = unit_data
    end
    result
  end

  def each_equipment
    glob("common/units/equipment/*.txt").each do |path|
      parse(path)["equipments"].each do |name, equipment|
        yield(name, equipment)
      end
    end
  end

  def equipment_data
    result = {}
    each_equipment do |name, equipment|
      equipment = equipment.to_h
      equipment["resources"] = equipment["resources"].to_h
      result[name] = equipment
    end
    # archetype inheritance
    result
  end

  def call
    data = { units: units_data, equipment: equipment_data }
    Pathname("#{__dir__}/../data/data.json").write JSON.pretty_generate(data)
  end
end

ImportData.new(*ARGV).call
