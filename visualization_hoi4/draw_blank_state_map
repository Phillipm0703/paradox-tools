#!/usr/bin/env ruby

require "RMagick"
require_relative "../lib/paradox"
require_relative "game_map"
require "pry"

class DrawBlankStateMap < ParadoxGame
  include GameMap

  def states_to_colors
    @states_to_colors ||= Hash.new do |ht,k|
      ht[k] = [rand(256), rand(256), rand(256)]
    end
  end

  def random_state_color_map
    Hash[
      province_definitions.map do |province_id, (color, land_sea)|
        state_id = province_ids_to_states[province_id]
        state_color = states_to_colors[state_id] if state_id
        if state_color
          new_color = state_color
        elsif land_sea == "land"
          new_color = [107, 66, 38]
        else
          new_color = [0, 0, 80]
        end
        [color, new_color.pack("C*")]
      end
    ]
  end

  def province_color_to_state_id
    @province_color_to_state_id ||= Hash[
      province_definitions.map do |province_id, (color, land_sea)|
        state_id = province_ids_to_states[province_id]
        if state_id
          # OK
        elsif land_sea == "land"
          state_id = -1
        else
          state_id = -2
        end
        [color, state_id]
      end
    ]
  end

  def state_at(x,y)
    x %= provinces_image.columns
    return nil if y < 0 or y >= ysize
    pixel = provinces_image_pixels[3*(x + y * xsize), 3]
    province_color_to_state_id[pixel]
  end

  def add_state_borders(pixels)
    black = [0,0,0].pack("C*")
    (0...provinces_image.columns).each do |x|
      (0...provinces_image.rows).each do |y|
        cc = state_at(x,y)
        cr = state_at(x+1,y)
        cl = state_at(x-1,y)
        cu = state_at(x,y-1)
        cd = state_at(x,y+1)
        border = false
        border = true if cr and cr != cc
        border = true if cl and cl != cc
        border = true if cu and cu != cc
        border = true if cd and cd != cc
        if border
          pixels[3*(x + y * xsize), 3] = black
        end
      end
    end
    pixels
  end

  def run!
    pixels = generate_map_image_pixels(random_state_color_map)
    # pixels = generate_map_image_pixels(land_sea_color_map)
    add_state_borders(pixels)
    pixels_to_img(pixels).write("blank_state_map.png")
  end
end

DrawBlankStateMap.new(*ARGV).run!
