#!/usr/bin/env ruby

require "RMagick"
require_relative "../lib/paradox"
require_relative "game_map"
require "pry"

class DrawSuppressionMap < ParadoxGame
  include GameMap

  def state_based_color_map
    Hash[
      province_definitions.map do |province_id, (color, land_sea)|
        state_id = province_ids_to_states[province_id]
        if state_id
          new_color = yield(state_id)
        elsif land_sea == "land"
          new_color = [107, 66, 38]
        else
          new_color = [0, 0, 80]
        end
        [color, new_color.pack("C*")]
      end
    ]
  end

  def suppression_color
    @suppression_color ||= begin
      ht = Hash.new do
        [255,0,0]
      end
      ht[0] = [255,255,255]
      ht[1] = [0,128,0]
      ht[2] = [0,255,0]
      ht[3] = [128,255,0]
      ht[4] = [255,255,0]
      ht[5] = [255,128,0]
      ht
    end
  end

  def suppression_color_map(mod)
    state_based_color_map do |state_id|
      suppression = (state_to_vp_total[state_id] * mod).floor
      cavs = (suppression/2.0).ceil
      suppression_color[cavs]
    end
  end

  def run!
    {
      "harshest" => 1.0,
      "harsh" => 0.8,
      "gentle" => 0.6,
      "gentlest" => 0.4,
    }.each do |level, num|
      pixels = generate_map_image_pixels(suppression_color_map(num))
      add_state_borders(pixels)
      pixels_to_img(pixels).write("suppression_#{level}.png")
    end
  end
end

DrawSuppressionMap.new(*ARGV).run!
