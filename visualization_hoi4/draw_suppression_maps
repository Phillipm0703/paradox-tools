#!/usr/bin/env ruby

require "RMagick"
require_relative "../lib/paradox"
require_relative "game_map"

class DrawSuppressionMap < ParadoxGame
  include GameMap

  def suppression_color
    @suppression_color ||= begin
      colors = %W[
        008080 339384 50a78a 6cbc92 88cf9b a8e1aa cef2be ffffe0 ffd8cd ffaeb5 f78599 e65f7b cf3b59 b11732 8b0000
      ].map{|c| c.scan(/../).map(&:hex)}
      ht = {}
      ht.default = colors[-1]
      ht[0] = [255,255,255]
      colors.each_with_index do |c,i|
        ht[i+1] = c
      end
      ht
    end
  end

  def state_id_to_cav(state_id, mod)
    suppression = (state_to_vp_total[state_id] * mod).floor
    (suppression/2.0).ceil
  end

  def suppression_color_map(mod)
    state_based_color_map do |state_id|
      suppression_color[state_id_to_cav(state_id, mod)]
    end
  end

  def add_suppression_labels(img, mod)
    text = Magick::Draw.new
    text.font_family = 'helvetica'
    text.pointsize = 12
    text.gravity = Magick::CenterGravity

    state_midpoints.sort.each do |state_id, midpoint|
      next unless state_to_vp_total[state_id]
      cavs = state_id_to_cav(state_id, mod)
      next if cavs == 0
      text.annotate(img, 0, 0, midpoint.x - xsize/2, midpoint.y - ysize/2 + 2, "#{cavs}")
    end
  end

  def run!
    {
      "harshest" => 1.0,
      "harsh" => 0.8,
      "gentle" => 0.6,
      "gentlest" => 0.4,
    }.each do |level, num|
      pixels = generate_map_image_pixels(suppression_color_map(num))
      add_state_borders(pixels)
      img = pixels_to_img(pixels)
      add_suppression_labels(img, num)
      write_image(img, "output/suppression_#{level}.png")
    end
  end
end

DrawSuppressionMap.new(*ARGV).run!
