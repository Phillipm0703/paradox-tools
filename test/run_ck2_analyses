#!/usr/bin/env ruby

require "shellwords"
require "pathname"

unless ARGV.size >= 3
  STDERR.puts "Usage: #{$0} savegame outputdir gamepath [mod1] [mod2...]"
  exit 1
end

save = ARGV[0]
output = Pathname(ARGV[1])
game = ARGV[2]
mods = ARGV[3..-1]

# analysis_ck2/best_demesne_for_eu4_converter
# requires EU4 province_values.txt

list = %Q[
  analysis_ck2/best_sites_for_new_holdings $s
  analysis_ck2/building_sites $s $g
  analysis_ck2/buildings $s
  analysis_ck2/buildings_by_realm $s $g
  analysis_ck2/cultures_by_realm $s $g
  analysis_ck2/empty_holdings $s
  analysis_ck2/independent_countries $s $g
  analysis_ck2/list_artifacts $s $g
  analysis_ck2/list_descendants $s
  analysis_ck2/list_secret_believers $s $g
  analysis_ck2/list_society_members $s $g
  analysis_ck2/province_cultures $s
  analysis_ck2/province_development $s $g
  analysis_ck2/province_religions $s
  analysis_ck2/province_tech $s
  analysis_ck2/realm_tech $s
  analysis_ck2/religions_by_realm $s $g
  analysis_ck2/traits_statistics $s $g
  analysis_ck2/tribal_development $s
  analysis_ck2/vassal_cultures $s
].lines.grep(/\S/).map(&:chomp).map(&:strip)

root_dir = Pathname(__dir__).parent

s_str = save.shellescape
g_str = [game, *mods].map(&:shellescape).join(" ")

output.mkpath
list.each do |cmd|
  name = cmd.split.first.split("/").last
  save_to = output + "#{name}.txt"
  cmd = cmd.sub("$s", s_str).sub("$g", g_str) + " >#{save_to.to_s.shellescape}"
  if save_to.exist?
    # puts "#{name} already exists"
  else
    puts "Running #{name}"
    puts cmd
    system "#{root_dir}/#{cmd}"
    puts ""
  end
end
