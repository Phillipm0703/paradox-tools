#!/usr/bin/env ruby

require_relative "../ck2/ck2_analyses"

class BestDemesneForEU4ConverterAnalysis < ParadoxGame
  include Ck2Analyses
  def initialize(*args)
    unless args.size == 2
      STDERR.puts "Usage: #{$0} <root> <province_values.txt>"
      exit 1
    end
    root, province_values_txt = *args
    @province_values = Pathname(province_values_txt).readlines.map{|line|
      k, n, v = line.chomp.split(/\t/, 3)
      [k.to_i, v.to_f]
    }.to_h
    super(root)
  end

  def ck2_to_eu4
    @ck2_to_eu4 ||= begin
      map = {}
      # This is not real address, just a side effect of data hiding in dlc zips
      parse_csv("dlc/dlc030/eu4_converter/province_table.csv")
        .select{|row| row.size != 0 and row[0][0] != "#"}
        .each do |ck2_title, eu4_province, |
        map[ck2_title] ||= []
        map[ck2_title] << eu4_province.to_i
      end
      map
    end
  end

  def titles
    @titles ||= begin
      map = {}
      title_paths.each do |title, path|
        next unless title =~ /\A[bc]_/
        path.each do |t|
          next if t =~ /\Ab_/
          map[t] ||= []
          map[t] << title
        end
      end
      map
    end
  end

  def eu4_to_ck2
    @eu4_to_ck2 ||= begin
      map = {}
      ck2_to_eu4.each do |ck2, eu4s|
        eu4s.each do |eu4|
          map[eu4] ||= []
          map[eu4] << ck2
        end
      end
      map
    end
  end

  def ck2_title_to_eu4
    @ck2_title_to_eu4 ||= begin
      map = {}
      titles.each do |title, subtitles|
        map[title] = Hash.new(0)
        [title, *subtitles].each do |ck2_title|
          next unless ck2_to_eu4[ck2_title]
          ck2_to_eu4[ck2_title].each do |eu4_province|
            eu4_value = @province_values[eu4_province]
            raise "Unknown province #{eu4_province}" unless eu4_value
            map[title][eu4_province] += eu4_value
          end
        end
      end
      map
    end
  end

  def title_size
    @title_size ||= begin
      map = {}
      titles.each do |title, subtitles|
        map[title] = subtitles.count{|t| t =~ /\Ac_/}
      end
      map
    end
  end

  def title_value
    @title_value ||= begin
      map = Hash.new(0)
      ck2_title_to_eu4.each do |title, eu4s|
        eu4s.each do |eu4, weight|
          # Hard to guess rounding
          w = weight / eu4_to_ck2[eu4].size.to_f
          # map[title] += 1 if w > 0.5
          # map[title] += 0.5 if w == 0.5
          map[title] += w
        end
      end
      map
    end
  end

  def call
    best_titles = titles.keys.sort_by{|t|
      [-title_value[t] / title_size[t], -title_size[t], t]
    }
    best_titles.each do |title|
      value = title_value[title].round(2)
      value = value.to_i if value == value.to_i
      tier = title[0].upcase
      puts "#{tier} #{localization(title)} - #{title_size[title]} counties become #{value} value [ #{title_paths[title].join("/")} ]"
    end
  end
end

BestDemesneForEU4ConverterAnalysis.new(*ARGV).call
