#!/usr/bin/env ruby

require_relative "../lib/paradox"
require_relative "image_generation"
require_relative "game_map"

class TechnologyMap < ParadoxGame
  include ImageGeneration
  include GameMap

  def initialize(save_game, *roots)
    super(*roots)
    @path = save_game
    @data = ParadoxModFile.new(path: @path).parse!
  end

  def province_technologies
    @province_technologies ||= begin
      map = {}
      @data["provinces"].to_a.each do |prop|
        id = prop.key
        next if prop.val == []
        if prop.val["technology"]
          t = prop.val["technology"]["tech_levels"].inject(&:+).round(1)
          map[id] = t
        end
      end
      map
    end
  end

  # 0 to 1
  def tech_scale_linear(t)
    @max_tech ||= province_technologies.values.max
    @min_tech ||= province_technologies.values.select{|v| v != 0}.min
    (t-@min_tech) / (@max_tech-@min_tech)
  end

  # 0 to 1
  # We return worst value if multiples are covered
  # (which mostly matters for initial map, not really later)
  def tech_scale_quantile(t)
    unless @tech_scale
      @tech_scale = {}
      samples = province_technologies.values.select{|v| v != 0}.sort
      samples.each_with_index do |s,i|
        @tech_scale[s] ||= i.to_f / (samples.size-1)
      end
    end
    @tech_scale[t]
  end

  def technology_map
    @technology_map ||= begin
      province_technologies.map{|i,t|
        if t == 0
          [i, [63, 63, 63]]
        else
          c = (255.0 * tech_scale_quantile(t)).round
          [i, [255-c, c, 127]]
        end
      }.to_h
    end
  end

  def save_path
    "output/ck2_technologies_#{@data["date"]}.png"
  end

  def run!
    Pathname("output").mkpath
    generate_map_image(build_color_map(technology_map)).write(save_path)
  end
end

TechnologyMap.new(*ARGV).run!
